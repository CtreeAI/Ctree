import 'dart:io';
import 'package:ctree/core/components/image_picker.dart';
import 'package:ctree/core/models/complaint_degree.dart';
import 'package:ctree/core/models/complaint_model.dart';
import 'package:ctree/core/models/image_file.dart';
import 'package:ctree/core/provider/complaint_provider.dart';
import 'package:ctree/pages/auth/data/auth_repository.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

class CreateComplaintPage extends StatefulWidget {
  const CreateComplaintPage({super.key});

  @override
  _CreateComplaintPageState createState() => _CreateComplaintPageState();
}

class _CreateComplaintPageState extends State<CreateComplaintPage> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController _titleController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _locationController = TextEditingController();
  String? _authorId;
  String? _authorName;
  String? _selectedOrg;
  ComplaintDegree? _selectedDegree;
  ImageFile? _complaintImage;

  void _handleImageSelection(ImageFile? image) {
    setState(() {
      _complaintImage = image;
    });
  }

  Future<void> _getCurrentUser() async {
    final currentUser = AuthRepository.currentUserModel;
    if (currentUser != null) {
      setState(() {
        _authorId = currentUser.uuid;
        _authorName = currentUser.displayName;
      });
    }
  }

  Widget _buildSelectedImage() {
    if (_complaintImage == null) return const SizedBox.shrink();

    if (_complaintImage!.isWeb) {
      return Image.memory(_complaintImage!.file);
    } else {
      return Image.file(_complaintImage!.file as File);
    }
  }

  Future<void> _submitComplaint() async {
    if (_formKey.currentState?.validate() ?? false) {
      if (_selectedOrg == null || _selectedDegree == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Por favor, selecione organização e gravidade'),
          ),
        );
        return;
      }

      // Get current user
      final currentUser = AuthRepository.currentUserModel;

      // Get selected organization details
      final selectedOrgData =
          Provider.of<ComplaintProvider>(context, listen: false)
              .organizations
              .firstWhere((org) => org['id'] == _selectedOrg);

      // Create complaint model with all required fields
      final complaint = ComplaintModel(
        id: '', // Will be generated by Firestore
        title: _titleController.text,
        imageUrl: '', // Will be set after upload
        degree: _selectedDegree!.label,
        orgId: _selectedOrg!,
        orgName: selectedOrgData['name']!,
        description: _descriptionController.text,
        location: _locationController.text,
        userId: _authorId!,
        createdAt: DateTime.now(), // Added createdAt field
      );

      // Show loading indicator
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(child: CircularProgressIndicator()),
      );

      try {
        final success =
            await Provider.of<ComplaintProvider>(context, listen: false)
                .createComplaint(complaint, _complaintImage);

        if (context.mounted) {
          Navigator.pop(context); // Close loading

          if (success) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('Reclamação criada com sucesso!'),
              ),
            );

            // Clear form
            _titleController.clear();
            _descriptionController.clear();
            _locationController.clear();
            setState(() {
              _complaintImage = null;
              _selectedOrg = null;
              _selectedDegree = null;
            });
          } else {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('Erro ao criar reclamação'),
              ),
            );
          }
        }
      } catch (e) {
        if (context.mounted) {
          Navigator.pop(context); // Close loading
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Erro ao criar reclamação: $e'),
            ),
          );
        }
      }
    }
  }

  @override
  void initState() {
    super.initState();
    _getCurrentUser();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Consumer<ComplaintProvider>(
        builder: (context, provider, child) {
          if (provider.isLoading) {
            return const Center(child: CircularProgressIndicator());
          }

          return SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Form(
              key: _formKey,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  TextFormField(
                    controller: _titleController,
                    decoration: const InputDecoration(
                      labelText: 'Título',
                      border: OutlineInputBorder(),
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Por favor, insira um título';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 20),
                  DropdownButtonFormField<String>(
                    value: _selectedOrg,
                    items: provider.organizations
                        .map((org) => DropdownMenuItem<String>(
                              value: org['id']
                                  .toString(), // Explicitly convert to String
                              child:
                                  Text(org['name']?.toString() ?? 'Sem nome'),
                            ))
                        .toList(),
                    onChanged: (value) {
                      setState(() {
                        _selectedOrg = value;
                      });
                    },
                    decoration: const InputDecoration(
                      labelText: 'Organização',
                      border: OutlineInputBorder(),
                    ),
                    validator: (value) {
                      if (value == null) {
                        return 'Por favor, selecione uma organização';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 20),
                  DropdownButtonFormField<ComplaintDegree>(
                    value: _selectedDegree,
                    items: ComplaintDegree.values
                        .map((degree) => DropdownMenuItem(
                              value: degree,
                              child: Text(degree.label),
                            ))
                        .toList(),
                    onChanged: (value) {
                      setState(() {
                        _selectedDegree = value;
                      });
                    },
                    decoration: const InputDecoration(
                      labelText: 'Gravidade',
                      border: OutlineInputBorder(),
                    ),
                    validator: (value) {
                      if (value == null) {
                        return 'Por favor, selecione a gravidade';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 20),
                  TextFormField(
                    controller: _locationController,
                    decoration: const InputDecoration(
                      labelText: 'Localização',
                      border: OutlineInputBorder(),
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Por favor, insira a localização';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 20),
                  TextFormField(
                    controller: _descriptionController,
                    decoration: const InputDecoration(
                      labelText: 'Descrição',
                      border: OutlineInputBorder(),
                    ),
                    maxLines: 4,
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return 'Por favor, insira uma descrição';
                      }
                      return null;
                    },
                  ),
                  const SizedBox(height: 20),
                  _buildSelectedImage(),
                  const SizedBox(height: 20),
                  GestureDetector(
                    onTap: () => showDialog(
                      context: context,
                      builder: (context) => ImagePickerModal(
                        onImageSelected: _handleImageSelection,
                      ),
                    ),
                    child: const Text(
                      'Escolher imagem para a reclamação',
                      style: TextStyle(color: Colors.blue),
                    ),
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton(
                    onPressed: _submitComplaint,
                    child: const Text('Enviar Reclamação'),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}
